import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import matplotlib.lines as mlines
import matplotlib.colors as mcolors
import random
from batchelor1982 import *

# Fourier modes = 0.5 0
a = 20.533623615045787
c = 4.*np.pi*a**2/1400
num_blob_list = np.array([12, 24, 48, 96, 
                          192, 384, 768, 1536,
                          3072, 6144])

ra_list = np.array([2.01, 2.02, 2.03,
                    2.05, 2.08, 2.12, 2.15, 
                    2.2, 2.3, 2.4, 2.5,
                    2.6, 2.8, 3.0, 3.5,
                    4.0, 4.5
                    ])
a_list = np.array([a for i in range(len(num_blob_list))])
a_list = np.reshape(a_list, (-1, 1))
r_list = (a_list * ra_list)
print('r_list', r_list)

# [41.27258347 41.4779197  41.68325594 42.09392841 42.70993712 43.53128206
#   44.14729077 45.17397195 47.22733431 49.28069668 51.33405904 53.3874214
#   57.49414612 61.60087085 71.86768265 82.13449446 92.40130627]

v_prl_list = np.array([[1.0420046311e-01, 1.0415347329e-01, 1.0410647110e-01,
                        1.0401240279e-01, 1.0387108754e-01, 1.0368228194e-01, 1.0354051802e-01,
                        1.0330443486e-01, 1.0283617431e-01, 1.0237820032e-01, 1.0193455850e-01,
                        1.0150731242e-01, 1.0070450098e-01, 9.9969353016e-02, 9.8395686445e-02,
                        9.7131472051e-02, 9.6103374963e-02
                        ],
                       [7.2879145355e-02, 7.2831721935e-02, 7.2784328995e-02, 
                        7.2689654307e-02, 7.2547991104e-02, 7.2359945931e-02, 7.2219689332e-02, 
                        7.1987722688e-02, 7.1532034756e-02, 7.1089469148e-02, 7.0661629682e-02, 
                        7.0249304132e-02, 6.9471934100e-02, 6.8756281941e-02, 6.7212742683e-02, 
                        6.5963714819e-02, 6.4943707834e-02
                        ],
                       [5.7531348896e-02, 5.7485833479e-02, 5.7440405263e-02, 
                        5.7349803706e-02, 5.7214533210e-02, 5.7035397591e-02, 5.6902037819e-02, 
                        5.6681857183e-02, 5.6250285475e-02, 5.5831689843e-02, 5.5426894762e-02, 
                        5.5036209238e-02, 5.4297082810e-02, 5.3612853401e-02, 5.2123314264e-02, 
                        5.0904918791e-02, 4.9902610755e-02
                        ],
                       [4.9931118867e-02, 4.9887283507e-02, 4.9843618867e-02, 
                        4.9756774010e-02, 4.9627631320e-02, 4.9457413360e-02, 4.9331208129e-02, 
                        4.9123662588e-02, 4.8719043434e-02, 4.8328148155e-02, 4.7950620925e-02, 
                        4.7586084802e-02, 4.6894400996e-02, 4.6250584237e-02, 4.4833925100e-02,
                        4.3659257887e-02, 4.2683313319e-02
                        ],
                       [4.6244020642e-02, 4.6202711724e-02, 4.6161548270e-02, 
                        4.6079648149e-02, 4.5957848951e-02, 4.5797394914e-02, 4.5678511453e-02,
                        4.5483131460e-02, 4.5102485957e-02, 4.4734808146e-02, 4.4379505723e-02, 
                        4.4036049543e-02, 4.3382871721e-02, 4.2772248227e-02, 4.1417089846e-02, 
                        4.0280509068e-02, 3.9324004707e-02
                        ],
                       [4.4566543469e-02, 4.4526651979e-02, 4.4486899487e-02, 
                        4.4407815340e-02, 4.4290243870e-02, 4.4135442852e-02, 4.4020796277e-02, 
                        4.3832445706e-02, 4.3464772067e-02, 4.3110637457e-02, 4.2768347491e-02, 
                        4.2437323755e-02, 4.1807153042e-02, 4.1216858905e-02, 3.9900532777e-02, 
                        3.8788583498e-02, 3.7851376283e-02
                        ],
                       [4.3872243788e-02, 4.3833078089e-02, 4.3794047133e-02, 
                        4.3716391482e-02, 4.3600907661e-02, 4.3448757293e-02, 4.3335997650e-02, 
                        4.3155978691e-02, 4.2794122666e-02, 4.2444067763e-02, 4.2105842932e-02, 
                        4.1780437913e-02, 4.1161110958e-02, 4.0580564466e-02, 3.9283160841e-02, 
                        3.8183358703e-02, 3.7248505372e-02
                        ],
                       [4.3634443732e-02, 4.3595617507e-02, 4.3556932574e-02, 
                        4.3479983806e-02, 4.3365603911e-02, 4.3215019170e-02, 4.3103501042e-02, 
                        4.2920291747e-02, 4.2563464773e-02, 4.2218706715e-02, 4.1885274139e-02, 
                        4.1556677950e-02, 4.0942155323e-02, 4.0365552790e-02, 3.9075452937e-02, 
                        3.7969649710e-02, 3.7043576209e-02
                        ],
                       [4.3599451699e-02, 4.3560579873e-02, 4.3521845194e-02, 
                        4.3444785581e-02, 4.3330214258e-02, 4.3179338360e-02, 4.3067579921e-02, 
                        4.2883930087e-02, 4.2526120757e-02, 4.2180424645e-02, 4.1846417216e-02, 
                        4.1523224188e-02, 4.0907778661e-02, 4.0330741147e-02, 3.9040260867e-02, 
                        3.7944891315e-02, 3.7017485232e-02
                        ],
                       [4.3578809216e-02, 4.3539929138e-02, 4.3501263689e-02, 
                        4.3424204059e-02, 4.3309765626e-02, 4.3158989615e-02, 4.3047331721e-02, 
                        4.2863836477e-02, 4.2506224159e-02, 4.2160538142e-02, 4.1826712617e-02, 
                        4.1503635791e-02, 4.0888575310e-02, 4.0311942410e-02, 3.9022140983e-02, 
                        3.7927177693e-02, 3.7000429336e-02, 
                        ]])

v_isolate = 2.8145485528e-02
                          
########################################################################
# Plot Error
########################################################################
def random_color(seed):
    random.seed(3*seed)
    cr = random.random()
    random.seed(3*seed+1)
    cg = random.random()
    random.seed(3*seed+2)
    cb = random.random()
    return (cr, cg, cb)
    
vw_prl_list = v_prl_list/v_isolate
vw_prl_batchelor_list = A11(ra_list, 1) + A12(ra_list,1)
vw_prl_error_list = abs(vw_prl_list - vw_prl_batchelor_list) / vw_prl_batchelor_list

fig2 = plt.figure()
ax2 = fig2.add_subplot(1,1,1)
for i, nb in enumerate(num_blob_list):
    ax2.plot(ra_list, vw_prl_error_list[i], marker='+', color=random_color(i), label=f'$N_blob={nb}$')
ax2.set_yscale('log')
ax2.set_xlabel(r'$r/a$')
ax2.set_ylabel(r'$\frac{|V/W - V/W_{exact}|}{V/W_{exact}}$')
ax2.set_title('Fixed radius on surface')
ax2.set_xlim(2, 4.5)
fig2.savefig('resolution_test_fixed_radius.eps', format='eps')
ax2.legend(ncol=2)

fig3 = plt.figure()
ax3 = fig3.add_subplot(1,1,1)
long_range_error_list = vw_prl_error_list[:, -1]
ax3.plot(num_blob_list, long_range_error_list)
ax3.set_xscale('log')
ax3.set_yscale('log')
ax3.set_xlabel(r'$number\ of\ blobs$')
ax3.set_ylabel(r'$\frac{|V/W - V/W_{exact}|}{V/W_{exact}}$')
ax3.set_title('Error for fixed sphere radius')
plt.savefig('resolution_test_fixed_radius_error_graph.eps', format='eps')
plt.show()
